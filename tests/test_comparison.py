import logging
import csv
import os
import sys

import pytest
from pyfaidx import Fasta

current_dir = os.path.dirname(os.path.abspath(__file__))
target_folder_path = os.path.join(current_dir, "..")
sys.path.append(target_folder_path)

import pyhgvs as hgvs
import pyhgvs.utils as hgvs_utils
from pyhgvs.models.hgvs_name import InvalidHGVSName

logger = logging.getLogger(__name__)

# The comparison files are generated by fixtures/downloads/download.py
# They consist of a range of variants that have been converted from HGVS to genomic coordinates by
# two third party services and are used to validate the behaviour of the in-house translator

class TestComparison:

    def read_csv(file_name):
        with open(file_name, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            return list(reader)
    
    @pytest.fixture(scope="class")
    def genome(self):
        file=os.getenv('FASTA')
        if file is None:
            raise Exception("FASTA env var not set")

        logger.info(f"Loading fasta: {file}")

        if not os.path.exists(file):
            raise Exception(f"Fasta file: {file} not found. Please check if file exists or FASTA environment variable has been defined")

        genome = Fasta(file)
        yield genome

    @pytest.fixture(scope="class")
    def transcripts(self):
        refgene=os.getenv('REFGENE')
        if refgene is None:
            raise Exception("REFGENE env var not set")
        logger.info(f"Refgene: {refgene}")

        if not os.path.exists(refgene):
            raise Exception(f"Refgene file: {refgene} not found. Please check if file exists or REFGENE environment variable has been defined")

        with open(refgene) as infile:
            transcripts = hgvs_utils.read_transcripts(infile)
        yield lambda name: transcripts.get(name)

    # Validate each row of the ensembl file against what is produced by the in house HGVS translator
    @pytest.mark.parametrize('rows', read_csv('tests/fixtures/downloads/output_ensemble.csv'))
    def test_against_ensembl(self, rows, genome: Fasta, transcripts):        
        self.compare(rows, genome, transcripts)
        
    # Validate each row of the variant validator file against what is produced by the in house HGVS translator
    @pytest.mark.parametrize('rows', read_csv('tests/fixtures/downloads/output_variant_validator.csv'))
    def test_against_variant_validator(self, rows, genome: Fasta, transcripts):
        self.compare(rows, genome, transcripts)
        
    def compare(self, row, genome, transcripts):
        logger.info(f"Using row: {row}")
        HGVS = row['HGVS']
        
        # Retrieve expected values
        expectedChr = row['Chromosome']
        expectedPos = str(row['Position'])
        expectedRef = str(row['Ref'])
        expectedAlt = str(row['Alt'])
        
        # Calculate actual values
        actualChr, actualPos, actualRef, actualAlt = hgvs.parse_hgvs_name(HGVS, genome=genome, get_transcript=transcripts, lazy=True)
        actualChr = actualChr[3:]   # the hgvs values are prefixed with chr, strip this for comparison
        actualPos = str(actualPos)  # compare the string equivalents
        
        assert actualChr == expectedChr, f'{HGVS}: {actualChr} != {expectedChr}'
        assert actualPos == expectedPos, f'{HGVS}: {actualPos} != {expectedPos}'
        assert actualRef == expectedRef, f'{HGVS}: {actualRef} != {expectedRef}'
        assert actualAlt == expectedAlt, f'{HGVS}: {actualAlt} != {expectedAlt}'

